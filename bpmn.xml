<testset xmlns="http://cpee.org/ns/properties/2.0">
  <executionhandler>ruby</executionhandler>
  <dataelements>
    <len_messages>0</len_messages>
    <safe_messages>[]</safe_messages>
    <len_rules>0</len_rules>
    <return_data>[]</return_data>
    <safe_rules>[]</safe_rules>
    <matching_results>[]</matching_results>
    <messages>[]</messages>
    <rules>[]</rules>
  </dataelements>
  <endpoints>
    <timeout>http://gruppe.wst.univie.ac.at/~mangler/services/timeout.php</timeout>
    <messages>http://localhost:8000/listen/messages</messages>
    <rules>http://localhost:8000/listen/rules</rules>
    <run_matching>http://localhost:27182/run/matching</run_matching>
    <add_matching>http://localhost:8000/add/matching</add_matching>
  </endpoints>
  <attributes>
    <info>test</info>
    <theme>extended</theme>
    <modeltype>CPEE</modeltype>
  </attributes>
  <description>
    <description xmlns="http://cpee.org/ns/description/1.0">
      <parallel wait="-1" cancel="last">
        <parallel_branch>
          <loop mode="pre_test" condition="true">
            <choose mode="exclusive">
              <alternative condition="data.messages.length() != data.len_messages || data.rules.length != data.len_rules">
                <manipulate id="a10" label="safe data und change len"># copy data from messages and rules into safe lists to freeze the current data and adjust new list lengths

data.safe_messages = []
data.safe_rules = []

data.messages.each{|msg| data.safe_messages &lt;&lt; msg.dup}
data.rules.each{|rule| data.safe_rules &lt;&lt; rule.dup}

data.len_messages = data.safe_messages.length()
data.len_rules = data.safe_rules.length()</manipulate>
                <parallel wait="-1" cancel="last">
                  <parallel_branch pass="" local="">
                    <_probability>
                      <_probability_min/>
                      <_probability_max/>
                      <_probability_avg/>
                    </_probability>
                    <call id="a8" endpoint="run_matching">
                      <parameters>
                        <label>match_lex_dist</label>
                        <method>:post</method>
                        <arguments>
                          <messages>!data.safe_messages</messages>
                          <rules>!data.safe_rules</rules>
                          <method>lex_dist</method>
                        </arguments>
                      </parameters>
                      <code>
                        <prepare/>
                        <finalize output="result">data.matching_results.push(*result)</finalize>
                        <update output="result"/>
                        <rescue output="result"/>
                      </code>
                      <annotations>
                        <_timing>
                          <_timing_weight/>
                          <_timing_avg/>
                          <explanations/>
                        </_timing>
                        <_shifting>
                          <_shifting_type>Duration</_shifting_type>
                        </_shifting>
                        <_context_data_analysis>
                          <probes/>
                          <ips/>
                        </_context_data_analysis>
                        <report>
                          <url/>
                        </report>
                        <_notes>
                          <_notes_general/>
                        </_notes>
                      </annotations>
                      <documentation>
                        <input/>
                        <output/>
                        <implementation>
                          <description/>
                        </implementation>
                        <code>
                          <description/>
                        </code>
                      </documentation>
                    </call>
                  </parallel_branch>
                  <parallel_branch pass="" local="">
                    <call id="a6" endpoint="run_matching">
                      <parameters>
                        <label>match_phone_dist</label>
                        <method>:post</method>
                        <arguments>
                          <messages>!data.safe_messages</messages>
                          <rules>!data.safe_rules</rules>
                          <method>phone_dist</method>
                        </arguments>
                      </parameters>
                      <code>
                        <prepare/>
                        <finalize output="result">data.matching_results.push(*result)</finalize>
                        <update output="result"/>
                        <rescue output="result"/>
                      </code>
                      <annotations>
                        <_timing>
                          <_timing_weight/>
                          <_timing_avg/>
                          <explanations/>
                        </_timing>
                        <_shifting>
                          <_shifting_type>Duration</_shifting_type>
                        </_shifting>
                        <_context_data_analysis>
                          <probes/>
                          <ips/>
                        </_context_data_analysis>
                        <report>
                          <url/>
                        </report>
                        <_notes>
                          <_notes_general/>
                        </_notes>
                      </annotations>
                      <documentation>
                        <input/>
                        <output/>
                        <implementation>
                          <description/>
                        </implementation>
                        <code>
                          <description/>
                        </code>
                      </documentation>
                    </call>
                  </parallel_branch>
                  <parallel_branch pass="" local="">
                    <choose mode="exclusive">
                      <alternative condition="false">
                        <call id="a2" endpoint="run_matching">
                          <parameters>
                            <label>match_embedding</label>
                            <method>:post</method>
                            <arguments>
                              <messages>!data.safe_messages</messages>
                              <rules>!data.safe_rules</rules>
                              <method>embedding</method>
                            </arguments>
                          </parameters>
                          <code>
                            <prepare/>
                            <finalize output="result">data.matching_results.push(*result)</finalize>
                            <update output="result"/>
                            <rescue output="result"/>
                          </code>
                          <annotations>
                            <_timing>
                              <_timing_weight/>
                              <_timing_avg/>
                              <explanations/>
                            </_timing>
                            <_shifting>
                              <_shifting_type>Duration</_shifting_type>
                            </_shifting>
                            <_context_data_analysis>
                              <probes/>
                              <ips/>
                            </_context_data_analysis>
                            <report>
                              <url/>
                            </report>
                            <_notes>
                              <_notes_general/>
                            </_notes>
                          </annotations>
                          <documentation>
                            <input/>
                            <output/>
                            <implementation>
                              <description/>
                            </implementation>
                            <code>
                              <description/>
                            </code>
                          </documentation>
                        </call>
                        <call id="a3" endpoint="run_matching">
                          <parameters>
                            <label>match_ask_chatgpt</label>
                            <method>:post</method>
                            <arguments>
                              <messages>!data.safe_messages</messages>
                              <rules>!data.safe_rules</rules>
                              <method>ask_chatgpt</method>
                            </arguments>
                          </parameters>
                          <code>
                            <prepare/>
                            <finalize output="result">data.matching_results.push(*result)</finalize>
                            <update output="result"/>
                            <rescue output="result"/>
                          </code>
                          <annotations>
                            <_timing>
                              <_timing_weight/>
                              <_timing_avg/>
                              <explanations/>
                            </_timing>
                            <_shifting>
                              <_shifting_type>Duration</_shifting_type>
                            </_shifting>
                            <_context_data_analysis>
                              <probes/>
                              <ips/>
                            </_context_data_analysis>
                            <report>
                              <url/>
                            </report>
                            <_notes>
                              <_notes_general/>
                            </_notes>
                          </annotations>
                          <documentation>
                            <input/>
                            <output/>
                            <implementation>
                              <description/>
                            </implementation>
                            <code>
                              <description/>
                            </code>
                          </documentation>
                        </call>
                        <_probability>
                          <_probability_min/>
                          <_probability_max/>
                          <_probability_avg/>
                        </_probability>
                      </alternative>
                      <otherwise/>
                    </choose>
                  </parallel_branch>
                </parallel>
                <choose mode="exclusive">
                  <alternative condition="data.matching_results.size &gt; 0">
                    <manipulate id="a12" label="match cleaning (no duplicates)">#Clean data by deleting all entries with duplicate rule_ids. Copy matching results to return_data and remove rule_id and msg_id to have clean data to return to correlator.

data.matching_results = data.matching_results.uniq{|match| match["rule_id"]}
data.return_data = []
data.matching_results.each{|match| data.return_data &lt;&lt; match.dup}
data.return_data.each{|match| 
  match.delete("rule_id")
  match.delete("msg_id")
}</manipulate>
                    <_probability>
                      <_probability_min/>
                      <_probability_max/>
                      <_probability_avg/>
                    </_probability>
                    <call id="a7" endpoint="add_matching">
                      <parameters>
                        <label>return matching</label>
                        <method>:post</method>
                        <arguments>
                          <matching_results>!data.return_data</matching_results>
                        </arguments>
                      </parameters>
                      <code>
                        <prepare/>
                        <finalize output="result"/>
                        <update output="result"/>
                        <rescue output="result"/>
                      </code>
                      <annotations>
                        <_timing>
                          <_timing_weight/>
                          <_timing_avg/>
                          <explanations/>
                        </_timing>
                        <_shifting>
                          <_shifting_type>Duration</_shifting_type>
                        </_shifting>
                        <_context_data_analysis>
                          <probes/>
                          <ips/>
                        </_context_data_analysis>
                        <report>
                          <url/>
                        </report>
                        <_notes>
                          <_notes_general/>
                        </_notes>
                      </annotations>
                      <documentation>
                        <input/>
                        <output/>
                        <implementation>
                          <description/>
                        </implementation>
                        <code>
                          <description/>
                        </code>
                      </documentation>
                    </call>
                    <manipulate id="a11" label="rule and message deletion"># delete all message entries and rules found in the matching results. Count deletions and calculate new length of message and rule list.

count_msg_deletion = 0

data.matching_results.each { |match|
  msg_index = data.messages.find_index{|msg| msg["id"] == match["msg_id"]}
  if msg_index
    data.messages.delete_at(msg_index)
    count_msg_deletion += 1
  end

  rule_index = data.rules.find_index{|rule| rule["id"] == match["rule_id"]}
  data.rules.delete_at(rule_index )
}

data.len_messages -= count_msg_deletion
data.len_rules -= data.matching_results.length()

data.matching_results = []</manipulate>
                  </alternative>
                  <otherwise/>
                </choose>
              </alternative>
              <otherwise/>
            </choose>
          </loop>
        </parallel_branch>
        <parallel_branch pass="" local="">
          <loop mode="pre_test" condition="true">
            <_probability>
              <_probability_min/>
              <_probability_max/>
              <_probability_avg/>
            </_probability>
            <call id="a4" endpoint="messages">
              <parameters>
                <label>messages</label>
                <method>:post</method>
                <arguments/>
              </parameters>
              <code>
                <prepare/>
                <finalize output="result">data.messages.push(result)</finalize>
                <update output="result"/>
                <rescue output="result"/>
              </code>
              <annotations>
                <_timing>
                  <_timing_weight/>
                  <_timing_avg/>
                  <explanations/>
                </_timing>
                <_shifting>
                  <_shifting_type>Duration</_shifting_type>
                </_shifting>
                <_context_data_analysis>
                  <probes/>
                  <ips/>
                </_context_data_analysis>
                <report>
                  <url/>
                </report>
                <_notes>
                  <_notes_general/>
                </_notes>
              </annotations>
              <documentation>
                <input/>
                <output/>
                <implementation>
                  <description/>
                </implementation>
                <code>
                  <description/>
                </code>
              </documentation>
            </call>
          </loop>
        </parallel_branch>
        <parallel_branch pass="" local="">
          <loop mode="pre_test" condition="true">
            <_probability>
              <_probability_min/>
              <_probability_max/>
              <_probability_avg/>
            </_probability>
            <call id="a5" endpoint="rules">
              <parameters>
                <label>rules</label>
                <method>:post</method>
                <arguments/>
              </parameters>
              <code>
                <prepare/>
                <finalize output="result">data.rules.push(result)</finalize>
                <update output="result"/>
                <rescue output="result"/>
              </code>
              <annotations>
                <_timing>
                  <_timing_weight/>
                  <_timing_avg/>
                  <explanations/>
                </_timing>
                <_shifting>
                  <_shifting_type>Duration</_shifting_type>
                </_shifting>
                <_context_data_analysis>
                  <probes/>
                  <ips/>
                </_context_data_analysis>
                <report>
                  <url/>
                </report>
                <_notes>
                  <_notes_general/>
                </_notes>
              </annotations>
              <documentation>
                <input/>
                <output/>
                <implementation>
                  <description/>
                </implementation>
                <code>
                  <description/>
                </code>
              </documentation>
            </call>
          </loop>
        </parallel_branch>
      </parallel>
      <stop id="a1"/>
    </description>
  </description>
  <transformation>
    <description type="copy"/>
    <dataelements type="none"/>
    <endpoints type="none"/>
  </transformation>
</testset>